{"ast":null,"code":"var _jsxFileName = \"/Users/Angelota/Library/Mobile Documents/com~apple~CloudDocs/Desktop/UCM/TFG INFOR/TFG FINAL/TFGI-Plataforma-blockchain-para-visualizar-la-reputacion-de-empresas-sobre-casos-de-discriminacion/cliente/src/contextProvider.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Web3 from 'web3';\nimport { ethers } from \"ethers\";\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\nimport ReputationControl from './ReputationControl.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const context = /*#__PURE__*/React.createContext({});\n\nconst ProviderA = props => {\n  _s2();\n\n  var [user, setUser] = useState(null);\n  var [balance, setBalance] = useState(null);\n  const pesos = [[0.5, 0], [0.45, 0.1], [0.4, 0.2], [0.325, 0.35]];\n  const [hashIPFSdata, setHash] = useState(\"\");\n  const [data1, setData1] = useState([]); //para guardar los datos del googlesheet de miembros\n\n  const [data2, setData2] = useState([]); //para guardar los datos del googlesheet de empresas\n  //Si todavia no se ha conectado con Metamask entonces aparece un popup para la conexion\n\n  const infuraUrl = process.env.REACT_APP_INFURA_URL; //Crea una instancia para comunicarse con el nodo indicado\n\n  const web3 = new Web3(new Web3.providers.HttpProvider(infuraUrl)); //Nos conectamos con el contrato\n\n  const contract = new web3.eth.Contract(ReputationControl.abi, process.env.REACT_APP_CONTRACT_ADDRESS);\n  const provider = ethers.getDefaultProvider(\"rinkeby\"); // Config variables\n\n  const doc = new GoogleSpreadsheet(process.env.REACT_APP_SPREADSHEET_ID);\n  useEffect(async () => {\n    var _s = $RefreshSig$();\n\n    const readSpreadsheet = async () => {\n      _s();\n\n      try {\n        await doc.useServiceAccountAuth({\n          client_email: process.env.REACT_APP_CLIENT_EMAIL,\n          private_key: process.env.REACT_APP_PRIVATE_KEY\n        }); // loads document properties and worksheets\n\n        await doc.loadInfo();\n        const sheet1 = doc.sheetsById[0];\n        const sheet2 = doc.sheetsById[2017905833];\n        const rows1 = await sheet1.getRows();\n        const rows2 = await sheet2.getRows();\n        setData1(rows1);\n        setData2(rows2);\n      } catch (e) {\n        console.error('Error: ', e);\n      }\n    };\n\n    _s(readSpreadsheet, \"XzZzjmf42T4ghIIVsLcPZIIQRXQ=\", false, function () {\n      return [doc.useServiceAccountAuth];\n    });\n\n    readSpreadsheet();\n    axios.get(`${process.env.REACT_APP_SERVER_URL}/getuser`, {\n      withCredentials: true\n    }).then(response => {\n      setUser(response.data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(context.Provider, {\n    value: {\n      \"user\": user,\n      \"web3\": web3,\n      \"contract\": contract,\n      \"provider\": provider,\n      \"miembros\": data1,\n      \"empresas\": data2,\n      \"pesos\": pesos\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(ProviderA, \"6HYa1x12qwW6Bn2Uk9wZ+1jJyFY=\");\n\n_c = ProviderA;\nexport default ProviderA;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderA\");","map":{"version":3,"sources":["/Users/Angelota/Library/Mobile Documents/com~apple~CloudDocs/Desktop/UCM/TFG INFOR/TFG FINAL/TFGI-Plataforma-blockchain-para-visualizar-la-reputacion-de-empresas-sobre-casos-de-discriminacion/cliente/src/contextProvider.js"],"names":["React","useEffect","useState","axios","Web3","ethers","GoogleSpreadsheet","ReputationControl","context","createContext","ProviderA","props","user","setUser","balance","setBalance","pesos","hashIPFSdata","setHash","data1","setData1","data2","setData2","infuraUrl","process","env","REACT_APP_INFURA_URL","web3","providers","HttpProvider","contract","eth","Contract","abi","REACT_APP_CONTRACT_ADDRESS","provider","getDefaultProvider","doc","REACT_APP_SPREADSHEET_ID","readSpreadsheet","useServiceAccountAuth","client_email","REACT_APP_CLIENT_EMAIL","private_key","REACT_APP_PRIVATE_KEY","loadInfo","sheet1","sheetsById","sheet2","rows1","getRows","rows2","e","console","error","get","REACT_APP_SERVER_URL","withCredentials","then","response","data","children"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport Web3 from 'web3';\nimport { ethers } from \"ethers\";\nimport {GoogleSpreadsheet} from \"google-spreadsheet\";\n\nimport ReputationControl from './ReputationControl.json';\n\nexport const context = React.createContext({});\n\nconst ProviderA = (props) => {\n\n    var [user, setUser] = useState(null);\n    var [balance, setBalance] = useState(null);\n    const pesos = [[0.5, 0], [0.45, 0.1], [0.4, 0.2], [0.325, 0.35]];\n    const [hashIPFSdata, setHash] = useState(\"\");\n    const [data1, setData1] = useState([]); //para guardar los datos del googlesheet de miembros\n    const [data2, setData2] = useState([]); //para guardar los datos del googlesheet de empresas\n    //Si todavia no se ha conectado con Metamask entonces aparece un popup para la conexion\n    const infuraUrl = process.env.REACT_APP_INFURA_URL;\n    //Crea una instancia para comunicarse con el nodo indicado\n    const web3 = new Web3(new Web3.providers.HttpProvider(infuraUrl));\n    //Nos conectamos con el contrato\n    const contract = new web3.eth.Contract(ReputationControl.abi, process.env.REACT_APP_CONTRACT_ADDRESS);\n    const provider = ethers.getDefaultProvider(\"rinkeby\");\n\n    // Config variables\n    const doc = new GoogleSpreadsheet(process.env.REACT_APP_SPREADSHEET_ID);\n    \n    useEffect(async () => {\n        const readSpreadsheet = async () => {\n            try {\n                await doc.useServiceAccountAuth({\n                client_email: process.env.REACT_APP_CLIENT_EMAIL,\n                private_key: process.env.REACT_APP_PRIVATE_KEY,\n            });\n                // loads document properties and worksheets\n                await doc.loadInfo();\n                const sheet1 = doc.sheetsById[0];\n                const sheet2 = doc.sheetsById[2017905833];\n                const rows1 = await sheet1.getRows();\n                const rows2 = await sheet2.getRows();\n                setData1(rows1);\n                setData2(rows2);\n        \n            } catch (e) {\n                console.error('Error: ', e);\n            }\n            };\n            readSpreadsheet();\n        axios.get(`${process.env.REACT_APP_SERVER_URL}/getuser`, { withCredentials :true})\n                .then((response) => {setUser(response.data);})\n        \n    }, []);\n    return <context.Provider value={{ \"user\" : user, \"web3\" : web3, \"contract\": contract, \"provider\": provider, \"miembros\": data1, \"empresas\": data2, \"pesos\": pesos }}>{props.children}</context.Provider>;\n}\n\nexport default ProviderA;\n"]},"metadata":{},"sourceType":"module"}